// Generated by CoffeeScript 1.12.7
var FylrExampleCustomDataType,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FylrExampleCustomDataType = (function(superClass) {
  extend(FylrExampleCustomDataType, superClass);

  function FylrExampleCustomDataType() {
    return FylrExampleCustomDataType.__super__.constructor.apply(this, arguments);
  }

  FylrExampleCustomDataType.prototype.getCustomDataTypeName = function() {
    return "custom:base.fylr_example.example";
  };

  FylrExampleCustomDataType.prototype.getCustomDataOptionsInDatamodelInfo = function(custom_settings) {
    var ref;
    console.debug("getCustomDataOptionsInDatamodelInfo", custom_settings);
    if ((ref = custom_settings.fylr_example_config) != null ? ref.value : void 0) {
      return ["true"];
    } else {
      return ["false"];
    }
  };

  FylrExampleCustomDataType.prototype.initData = function(data) {
    if (!data[this.name()]) {
      return data[this.name()] = {};
    }
  };

  FylrExampleCustomDataType.prototype.renderDetailOutput = function(data, top_level_data, opts) {
    var cdata, div;
    cdata = data[this.name()];
    console.debug("renderDetailOutput", cdata, cdata.textfield);
    div = CUI.dom.element("DIV");
    CUI.dom.append(div, new CUI.Label({
      text: cdata.textfield
    }));
    CUI.dom.append(div, new CUI.Label({
      text: cdata.numberfield
    }));
    return div;
  };

  FylrExampleCustomDataType.prototype.renderEditorInput = function(data, top_level_data, opts) {
    var cdata, div, form, mask_settings, od, schema_settings;
    this.initData(data);
    cdata = data[this.name()];
    form = new CUI.Form({
      data: cdata,
      fields: [
        {
          form: {
            label: "textfield"
          },
          type: CUI.Input,
          name: "textfield"
        }, {
          form: {
            label: "numberfield"
          },
          type: CUI.NumberInput,
          name: "numberfield"
        }
      ],
      onDataChanged: (function(_this) {
        return function() {
          return CUI.Events.trigger({
            node: form,
            type: "editor-changed"
          });
        };
      })(this)
    }).start();
    schema_settings = this.getCustomSchemaSettings();
    mask_settings = this.getCustomMaskSettings();
    od = new CUI.ObjectDumper({
      header_left: "mask/schema settings",
      do_open: true,
      object: {
        schema: schema_settings,
        mask: mask_settings
      }
    });
    div = CUI.dom.element("DIV");
    CUI.dom.append(div, form);
    CUI.dom.append(div, od);
    return div;
  };

  FylrExampleCustomDataType.prototype.getSaveData = function(data, save_data, opts) {
    var cdata, ref;
    cdata = data[this.name()] || ((ref = data._template) != null ? ref[this.name()] : void 0) || {};
    cdata._expires_at = (new Date()).toISOString();
    save_data[this.name()] = CUI.util.copyObject(cdata, true);
    console.info("getSaveData", save_data[this.name()]);
  };

  FylrExampleCustomDataType.prototype.isSourceForMapping = function() {
    return true;
  };

  return FylrExampleCustomDataType;

})(CustomDataType);

CustomDataType.register(FylrExampleCustomDataType);
// Generated by CoffeeScript 1.12.7
var DetailSidebarRender,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

DetailSidebarRender = (function(superClass) {
  extend(DetailSidebarRender, superClass);

  function DetailSidebarRender() {
    return DetailSidebarRender.__super__.constructor.apply(this, arguments);
  }

  DetailSidebarRender.prototype.prefName = function() {
    return "example_detail_sidebar_plugin";
  };

  DetailSidebarRender.prototype.getPane = function() {
    return "top";
  };

  DetailSidebarRender.prototype.getButtonLocaKey = function() {
    return "example.detail.sidebar.plugin.render_object";
  };

  DetailSidebarRender.prototype.render = function() {
    return console.info("DetailSidebarRender.render():", this._detailSidebar);
  };

  DetailSidebarRender.prototype.renderObject = function() {
    return console.info("DetailSidebarRender.renderObject():", this._detailSidebar, this.__currentObject);
  };

  DetailSidebarRender.prototype.isAvailable = function() {
    return true;
  };

  DetailSidebarRender.prototype.hideDetail = function() {
    return this._detailSidebar.mainPane.empty("top");
  };

  DetailSidebarRender.prototype.showDetail = function() {
    var form, objData, param_id, param_language, param_mask, param_objecttype, param_token, render_endpoint;
    objData = this._detailSidebar.object.getData();
    render_endpoint = "api/v1/plugin/base/fylr_example/render/standard_extended";
    console.debug("render_endpoint", render_endpoint);
    form = document.createElement("form");
    form.action = render_endpoint;
    form.target = "_blank";
    form.method = "GET";
    console.debug("form", form);
    param_id = document.createElement("input");
    param_id.type = "hidden";
    param_id.name = "id";
    param_id.value = objData[objData._objecttype]._id;
    form.appendChild(param_id);
    param_objecttype = document.createElement("input");
    param_objecttype.type = "hidden";
    param_objecttype.name = "objecttype";
    param_objecttype.value = objData._objecttype;
    form.appendChild(param_objecttype);
    param_mask = document.createElement("input");
    param_mask.type = "hidden";
    param_mask.name = "mask";
    param_mask.value = objData._mask;
    form.appendChild(param_mask);
    param_language = document.createElement("input");
    param_language.type = "hidden";
    param_language.name = "language";
    param_language.value = ez5.session.frontend_language;
    form.appendChild(param_language);
    param_token = document.createElement("input");
    param_token.type = "hidden";
    param_token.name = "access_token";
    param_token.value = ez5.session.token;
    form.appendChild(param_token);
    console.debug("form", form);
    document.body.appendChild(form);
    this._detailSidebar.mainPane.replace([
      new CUI.Button({
        text: "Render object in standard_extended format",
        onClick: (function(_this) {
          return function() {
            return form.submit();
          };
        })(this)
      })
    ], "top");
    return this;
  };

  return DetailSidebarRender;

})(DetailSidebarPlugin);

ez5.session_ready((function(_this) {
  return function() {
    return DetailSidebar.plugins.registerPlugin(DetailSidebarRender);
  };
})(this));
// Generated by CoffeeScript 1.12.7
var FylrExampleTransition,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FylrExampleTransition = (function(superClass) {
  extend(FylrExampleTransition, superClass);

  function FylrExampleTransition() {
    return FylrExampleTransition.__super__.constructor.apply(this, arguments);
  }

  FylrExampleTransition.prototype.getListViewColumn = function() {
    return {
      type: CUI.Output,
      text: "Comment"
    };
  };

  FylrExampleTransition.prototype.getSaveData = function() {
    var sd;
    sd = {
      type: FylrExampleTransition.getType(),
      info: {
        comment: "horst"
      }
    };
    return sd;
  };

  FylrExampleTransition.getType = function() {
    return "fylr_example:set_comment";
  };

  FylrExampleTransition.getDisplayName = function() {
    return "Comment";
  };

  return FylrExampleTransition;

})(TransitionActionAction);

TransitionAction.registerAction(FylrExampleTransition);
